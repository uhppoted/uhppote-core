package messages

import (
	"reflect"
	"testing"

	codec "github.com/uhppoted/uhppote-core/encoding/UTO311-L0x"
)

func TestMarshalSetFirstCardRequest(t *testing.T) {
	expected := []byte{
		0x17, 0xaa, 0x00, 0x00, 0x2d, 0x55, 0x39, 0x19, 0x03, 0x08, 0x30, 0x01, 0x17, 0x45, 0x02, 0x01,
		0x01, 0x00, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	request := SetFirstCardRequest{
		SerialNumber:     423187757,
		Door:             3,
		Start:            *hhmm("08:30"),
		StartDoorControl: 1,
		End:              *hhmm("17:45"),
		EndDoorControl:   2,
		Monday:           true,
		Tuesday:          true,
		Wednesday:        false,
		Thursday:         true,
		Friday:           false,
		Saturday:         true,
		Sunday:           true,
	}

	if m, err := codec.Marshal(request); err != nil {
		t.Fatalf("Unexpected error: %v", err)
	} else if !reflect.DeepEqual(m, expected) {
		t.Errorf("Invalid byte array:\nExpected:\n%s\nReturned:\n%s", dump(expected, ""), dump(m, ""))
	}
}

func TestFactoryUnmarshalSetFirstCardRequest(t *testing.T) {
	message := []byte{
		0x17, 0xaa, 0x00, 0x00, 0x2d, 0x55, 0x39, 0x19, 0x03, 0x08, 0x30, 0x01, 0x17, 0x45, 0x02, 0x01,
		0x01, 0x00, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	expected := SetFirstCardRequest{
		MsgType:          0xAA,
		SerialNumber:     423187757,
		Door:             3,
		Start:            *hhmm("08:30"),
		StartDoorControl: 1,
		End:              *hhmm("17:45"),
		EndDoorControl:   2,
		Monday:           true,
		Tuesday:          true,
		Wednesday:        false,
		Thursday:         true,
		Friday:           false,
		Saturday:         true,
		Sunday:           true,
	}

	request, err := UnmarshalRequest(message)
	if err != nil {
		t.Fatalf("Unexpected error: %v", err)
	} else if request == nil {
		t.Fatalf("Unexpected request: %v\n", request)
	}

	rq, ok := request.(*SetFirstCardRequest)
	if !ok {
		t.Fatalf("Invalid request type - expected:%T, got: %T\n", &SetFirstCardRequest{}, request)
	}

	if !reflect.DeepEqual(*rq, expected) {
		t.Errorf("Incorrect request\n   expected:%+v\n   got:     %+v", expected, *rq)
	}
}

func TestUnmarshalSetFirstCardResponse(t *testing.T) {
	message := []byte{
		0x17, 0xaa, 0x00, 0x00, 0x2d, 0x55, 0x39, 0x19, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	expected := SetFirstCardResponse{
		MsgType:      0xAA,
		SerialNumber: 423187757,
		Succeeded:    true,
	}

	reply := SetFirstCardResponse{}

	if err := codec.Unmarshal(message, &reply); err != nil {
		t.Fatalf("Unexpected error: %v\n", err)
	}

	if !reflect.DeepEqual(reply, expected) {
		t.Errorf("Incorrect reply\n   expected:%+v\n   got:     %+v", expected, reply)
	}
}

func TestFactoryUnmarshalSetFirstCardResponse(t *testing.T) {
	message := []byte{
		0x17, 0xaa, 0x00, 0x00, 0x2d, 0x55, 0x39, 0x19, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	expected := SetFirstCardResponse{
		MsgType:      0xAA,
		SerialNumber: 423187757,
		Succeeded:    true,
	}

	response, err := UnmarshalResponse(message)
	if err != nil {
		t.Fatalf("Unexpected error: %v\n", err)
	} else if response == nil {
		t.Fatalf("Unexpected response: %v\n", response)
	}

	reply, ok := response.(*SetFirstCardResponse)
	if !ok {
		t.Fatalf("Invalid response type - expected:%T, got: %T\n", &SetFirstCardResponse{}, response)
	}

	if !reflect.DeepEqual(*reply, expected) {
		t.Errorf("Incorrect reply\n   expected:%+v\n   got:     %+v", expected, reply)
	}
}

func TestUnmarshalSetFirstCardResponseWithInvalidMsgType(t *testing.T) {
	message := []byte{
		0x17, 0x94, 0x00, 0x00, 0x2d, 0x55, 0x39, 0x19, 0xc0, 0xa8, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x19, 0x39, 0x55, 0x2d, 0x2d, 0x55, 0x39, 0x19, 0x08, 0x92,
		0x20, 0x18, 0x08, 0x16, 0x20, 0x18, 0x12, 0x31, 0x12, 0x23, 0x34, 0x01, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	reply := SetFirstCardResponse{}

	if err := codec.Unmarshal(message, &reply); err == nil {
		t.Fatalf("Expected error: '%v'", "Invalid value in message - expected 0xAA, received 0x94")
	}
}
