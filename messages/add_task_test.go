package messages

import (
	"reflect"
	"testing"

	codec "github.com/uhppoted/uhppote-core/encoding/UTO311-L0x"
)

func TestMarshalAddTaskRequest(t *testing.T) {
	expected := []byte{
		0x17, 0xa8, 0x00, 0x00, 0x2d, 0x55, 0x39, 0x19, 0x20, 0x21, 0x04, 0x01, 0x20, 0x21, 0x12, 0x29,
		0x01, 0x01, 0x00, 0x01, 0x00, 0x01, 0x01, 0x08, 0x30, 0x03, 0x04, 0x07, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	request := AddTaskRequest{
		SerialNumber: 423187757,
		From:         yyyymmdd("2021-04-01"),
		To:           yyyymmdd("2021-12-29"),
		Monday:       true,
		Tuesday:      true,
		Wednesday:    false,
		Thursday:     true,
		Friday:       false,
		Saturday:     true,
		Sunday:       true,
		Start:        *hhmm("08:30"),
		Door:         3,
		Task:         4,
		MoreCards:    7,
	}

	if m, err := codec.Marshal(request); err != nil {
		t.Fatalf("Unexpected error: %v", err)
	} else if !reflect.DeepEqual(m, expected) {
		t.Errorf("Invalid byte array:\nExpected:\n%s\nReturned:\n%s", dump(expected, ""), dump(m, ""))
	}
}

func TestFactoryUnmarshalAddTaskRequest(t *testing.T) {
	message := []byte{
		0x17, 0xa8, 0x00, 0x00, 0x2d, 0x55, 0x39, 0x19, 0x20, 0x21, 0x04, 0x01, 0x20, 0x21, 0x12, 0x29,
		0x01, 0x01, 0x00, 0x01, 0x00, 0x01, 0x01, 0x08, 0x30, 0x03, 0x04, 0x07, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	expected := AddTaskRequest{
		MsgType:      0xA8,
		SerialNumber: 423187757,
		From:         yyyymmdd("2021-04-01"),
		To:           yyyymmdd("2021-12-29"),
		Monday:       true,
		Tuesday:      true,
		Wednesday:    false,
		Thursday:     true,
		Friday:       false,
		Saturday:     true,
		Sunday:       true,
		Start:        *hhmm("08:30"),
		Door:         3,
		Task:         4,
		MoreCards:    7,
	}

	request, err := UnmarshalRequest(message)
	if err != nil {
		t.Fatalf("Unexpected error: %v", err)
	} else if request == nil {
		t.Fatalf("Unexpected request: %v\n", request)
	}

	rq, ok := request.(*AddTaskRequest)
	if !ok {
		t.Fatalf("Invalid request type - expected:%T, got: %T\n", &AddTaskRequest{}, request)
	}

	if !reflect.DeepEqual(*rq, expected) {
		t.Errorf("Incorrect request\n   expected:%+v\n   got:     %+v", expected, *rq)
	}
}

func TestUnmarshalAddTaskResponse(t *testing.T) {
	message := []byte{
		0x17, 0xa8, 0x00, 0x00, 0x2d, 0x55, 0x39, 0x19, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	expected := AddTaskResponse{
		MsgType:      0xA8,
		SerialNumber: 423187757,
		Succeeded:    true,
	}

	reply := AddTaskResponse{}

	if err := codec.Unmarshal(message, &reply); err != nil {
		t.Fatalf("Unexpected error: %v\n", err)
	}

	if !reflect.DeepEqual(reply, expected) {
		t.Errorf("Incorrect reply\n   expected:%+v\n   got:     %+v", expected, reply)
	}
}

func TestFactoryUnmarshalAddTaskResponse(t *testing.T) {
	message := []byte{
		0x17, 0xa8, 0x00, 0x00, 0x2d, 0x55, 0x39, 0x19, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	expected := AddTaskResponse{
		MsgType:      0xA8,
		SerialNumber: 423187757,
		Succeeded:    true,
	}

	response, err := UnmarshalResponse(message)
	if err != nil {
		t.Fatalf("Unexpected error: %v\n", err)
	} else if response == nil {
		t.Fatalf("Unexpected response: %v\n", response)
	}

	reply, ok := response.(*AddTaskResponse)
	if !ok {
		t.Fatalf("Invalid response type - expected:%T, got: %T\n", &AddTaskResponse{}, response)
	}

	if !reflect.DeepEqual(*reply, expected) {
		t.Errorf("Incorrect reply\n   expected:%+v\n   got:     %+v", expected, reply)
	}
}

func TestUnmarshalAddTaskResponseWithInvalidMsgType(t *testing.T) {
	message := []byte{
		0x17, 0x94, 0x00, 0x00, 0x2d, 0x55, 0x39, 0x19, 0xc0, 0xa8, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x19, 0x39, 0x55, 0x2d, 0x2d, 0x55, 0x39, 0x19, 0x08, 0x92,
		0x20, 0x18, 0x08, 0x16, 0x20, 0x18, 0x12, 0x31, 0x12, 0x23, 0x34, 0x01, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	reply := AddTaskResponse{}

	if err := codec.Unmarshal(message, &reply); err == nil {
		t.Fatalf("Expected error: '%v'", "Invalid value in message - expected 0xA8, received 0x94")
	}
}
