package messages

import (
	"reflect"
	"testing"

	codec "github.com/uhppoted/uhppote-core/encoding/UTO311-L0x"
)

func TestMarshalSetSuperPasswordsRequest(t *testing.T) {
	expected := []byte{
		0x17, 0x8c, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x03, 0x00, 0x00, 0x00, 0x39, 0x30, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x3f, 0x42, 0x0f, 0x00, 0x31, 0xd4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	request := SetSuperPasswordsRequest{
		SerialNumber: 405419896,
		Door:         3,
		Password1:    12345,
		Password2:    0,
		Password3:    999999,
		Password4:    54321,
	}

	m, err := codec.Marshal(request)
	if err != nil {
		t.Fatalf("Unexpected error: %v", err)
	}

	if !reflect.DeepEqual(m, expected) {
		t.Errorf("Invalid byte array:\nExpected:\n%s\nReturned:\n%s", dump(expected, ""), dump(m, ""))
	}
}

func TestFactoryUnmarshalSetSuperPasswordsRequest(t *testing.T) {
	message := []byte{
		0x17, 0x8c, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x03, 0x00, 0x00, 0x00, 0x39, 0x30, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x3f, 0x42, 0x0f, 0x00, 0x31, 0xd4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	request, err := UnmarshalRequest(message)
	if err != nil {
		t.Fatalf("Unexpected error: %v", err)
	}

	if request == nil {
		t.Fatalf("Unexpected request: %v", request)
	}

	rq, ok := request.(*SetSuperPasswordsRequest)
	if !ok {
		t.Fatalf("Invalid request type - expected:%T, got: %T", &SetSuperPasswordsRequest{}, request)
	}

	if rq.MsgType != 0x8c {
		t.Errorf("Incorrect 'message type' from valid message - expected:%02x, got:%02x", 0x8c, rq.MsgType)
	}

	if rq.SerialNumber != 405419896 {
		t.Errorf("Incorrect 'serial number' from valid message - expected:%v, got:%v", 405419896, rq.SerialNumber)
	}

	if rq.Door != 3 {
		t.Errorf("Incorrect 'door' from valid message - expected:%d, got:%d", 3, rq.Door)
	}

	if rq.Password1 != 12345 {
		t.Errorf("Incorrect 'password 1' from valid message - expected:%d, got:%d", 12345, rq.Password1)
	}

	if rq.Password2 != 0 {
		t.Errorf("Incorrect 'password 2' from valid message - expected:%d, got:%d", 0, rq.Password2)
	}

	if rq.Password3 != 999999 {
		t.Errorf("Incorrect 'password 3' from valid message - expected:%d, got:%d", 999999, rq.Password3)
	}

	if rq.Password4 != 54321 {
		t.Errorf("Incorrect 'password 4' from valid message - expected:%d, got:%d", 54321, rq.Password4)
	}
}

func TestUnmarshalSetSuperPasswordsResponse(t *testing.T) {
	message := []byte{
		0x17, 0x8c, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	reply := SetSuperPasswordsResponse{}

	err := codec.Unmarshal(message, &reply)
	if err != nil {
		t.Fatalf("Unexpected error: %v\n", err)
	}

	if reply.MsgType != 0x8c {
		t.Errorf("Incorrect 'message type' - expected:%02x, got:%02x", 0x8c, reply.MsgType)
	}

	if reply.SerialNumber != 405419896 {
		t.Errorf("Incorrect 'serial number' from valid message - expected:%v, got:%v", 405419896, reply.SerialNumber)
	}

	if !reply.Succeeded {
		t.Errorf("Incorrect 'succeeded' - expected:%v, got:%v", true, reply.Succeeded)
	}
}

func TestFactoryUnmarshalSetSuperPasswordsResponse(t *testing.T) {
	message := []byte{
		0x17, 0x8c, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	response, err := UnmarshalResponse(message)
	if err != nil {
		t.Fatalf("Unexpected error: %v", err)
	} else if response == nil {
		t.Fatalf("Unexpected response: %v", response)
	}

	reply, ok := response.(*SetSuperPasswordsResponse)
	if !ok {
		t.Fatalf("Invalid response type - expected:%T, got: %T", &SetSuperPasswordsResponse{}, response)
	}

	if reply.MsgType != 0x8c {
		t.Errorf("Incorrect 'message type' - expected:%02x, got:%02x", 0x8c, reply.MsgType)
	}

	if reply.SerialNumber != 405419896 {
		t.Errorf("Incorrect 'serial number' from valid message - expected:%v, got:%v", 405419896, reply.SerialNumber)
	}

	if !reply.Succeeded {
		t.Errorf("Incorrect 'succeeded' - expected:%v, got:%v\n", true, reply.Succeeded)
	}
}

func TestUnmarshalSetSuperPasswordsResponseWithInvalidMsgType(t *testing.T) {
	message := []byte{
		0x17, 0x94, 0x00, 0x00, 0x41, 0x78, 0x1e, 0x12, 0x20, 0x19, 0x12, 0x29, 0x12, 0x34, 0x56, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	reply := SetSuperPasswordsResponse{}

	err := codec.Unmarshal(message, &reply)
	if err == nil {
		t.Fatalf("Expected error: '%v'", "Invalid value in message - expected 0x8c, received 0x94")
	}
}
