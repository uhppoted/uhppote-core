package uhppote

import (
	"encoding/hex"
	"fmt"
	"reflect"
	"regexp"
	"testing"
	"uhppote/messages"
)

var findDevicesRequest = []byte{
	0x17, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
}

func TestMarshalFindDevicesRequest(t *testing.T) {
	var request messages.Message

	request, _ = messages.NewFindDevicesRequest()
	result, err := Marshal(request)

	if err != nil {
		t.Errorf("uhppote.Marshal(%s) returned unexpected error: %v", request.Name(), err)
	}

	if !reflect.DeepEqual(*result, findDevicesRequest) {
		t.Errorf("Invalid byte array for uhppote.Marshal(%s):\nExpected:\n%s\nReturned:\n%s", request.Name(), print(findDevicesRequest), print(*result))
	}
}

func TestUnmarshal(t *testing.T) {
}

func print(m []byte) string {
	regex := regexp.MustCompile("(?m)^(.*)")

	return fmt.Sprintf("%s", regex.ReplaceAllString(hex.Dump(m), "$1"))
}
