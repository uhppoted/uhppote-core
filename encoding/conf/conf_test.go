package conf

import (
	"testing"
)

const config = `# UDP
bind.address = 192.168.1.100:54321

# REST API
rest.enabled = false
rest.port = 8080
rest.certificate = /etc/uhppoted/rest/uhppoted.cert

# DEVICES
UT0311-L0x.305419896.address = 192.168.1.100:60000
UT0311-L0x.305419896.door.1 = Front Door
UT0311-L0x.305419896.door.2 = Side Door
UT0311-L0x.305419896.door.3 = Garage
UT0311-L0x.305419896.door.4 = Workshop
`

func TestUnmarshal(t *testing.T) {
	// message := []byte{
	// 	0x17, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	// 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	// 	0x00, 0x20, 0x18, 0x08, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	// 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	// }

	// reply := struct {
	// 	MsgType   types.MsgType `uhppote:"value:0x94"`
	// 	Interface testType      `uhppote:"offset:33"`
	// }{}

	// err := Unmarshal(message, &reply)

	// if err != nil {
	// 	t.Errorf("Unexpected error: %v", err)
	// 	return
	// }

	// if reply.MsgType != 0x94 {
	// 	t.Errorf("Expected 'byte':0x%02X, got: 0x%02X\n", 0x94, reply.MsgType)
	// }

	// if !reflect.DeepEqual(reply.Interface.bytes, []byte{0x20, 0x19, 0x0a, 0x19}) {
	// 	t.Errorf("Expected interface value '%v', got: '%v'\n", []byte{0x20, 0x19, 0x0a, 0x19}, reply.Interface)
	// }
}
