package uhppote

import (
	"net"
	"testing"

	"github.com/uhppoted/uhppote-core/types"
)

func TestGetAntiPassback(t *testing.T) {
	reply := []byte{
		0x17, 0x86, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	expected := types.Readers1_234

	u := uhppote{
		driver: &stub{
			broadcastTo: func(addr *net.UDPAddr, request []byte, handler func([]byte) bool) ([]byte, error) {
				return reply, nil
			},
		},
	}

	if mode, err := u.GetAntiPassback(405419896); err != nil {
		t.Fatalf("unexpected error (%v)", err)
	} else if mode != expected {
		t.Errorf("incorrect response - expected:%v, got:%v", expected, mode)
	}
}
