package uhppote

import (
	"net"
	"testing"
)

func TestSetDoorPasscodes(t *testing.T) {
	message := []byte{
		0x17, 0x8c, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	u := uhppote{
		driver: &stub{
			broadcastTo: func(addr *net.UDPAddr, request []byte, handler func([]byte) bool) ([]byte, error) {
				return message, nil
			},
		},
	}

	ok, err := u.SetDoorPasscodes(405419896, 3, []uint32{12345, 0, 1000000, 999999}...)
	if err != nil {
		t.Fatalf("Unexpected error returned from SetDoorPasscodes (%v)", err)
	}

	if !ok {
		t.Errorf("Invalid response - expected:%v, got:%v", true, ok)
	}
}

func TestSetDoorPasscodesWithInvalidControllerID(t *testing.T) {
	u := uhppote{}

	_, err := u.SetDoorPasscodes(0, 3, []uint32{12345, 0, 999999, 1000000}...)
	if err == nil {
		t.Fatalf("Expected 'Invalid device ID' error, got %v", err)
	}
}
