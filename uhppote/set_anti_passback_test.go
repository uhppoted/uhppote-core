package uhppote

import (
	"net"
	"testing"

	"github.com/uhppoted/uhppote-core/types"
)

func TestSetAntiPassback(t *testing.T) {
	reply := []byte{
		0x17, 0x84, 0x00, 0x00, 0x78, 0x37, 0x2a, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	expected := true

	u := uhppote{
		driver: &stub{
			broadcastTo: func(addr *net.UDPAddr, request []byte, handler func([]byte) bool) ([]byte, error) {
				return reply, nil
			},
		},
	}

	if ok, err := u.SetAntiPassback(405419896, types.Readers1_234); err != nil {
		t.Fatalf("unexpected error (%v)", err)
	} else if ok != expected {
		t.Errorf("incorrect response - expected:%v, got:%v", expected, ok)
	}
}
