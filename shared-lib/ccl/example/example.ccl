(open-shared-library "libuhppoted-debug.so")

(defun uhppoted-externs () ""
   (external "GetDevices")
)

(define-condition on-uhppote-error (error)
   ((message :initarg :message :reader message))
)

(defstruct get-devices-list N devices)

(defun get-devices () ""
   (let ((u (get-devices-x 1)))
      (cond ((<= (get-devices-list-N u) 1) (get-devices-list-devices u))
            (T (get-devices-x 2))
      )
   )
)

(defun get-devices-x (size) ""
   (print (list ">>> get-devices-x" size))
   (multiple-value-bind (devices pdevices) (make-heap-ivector size '(unsigned-byte 32))
      (rlet ((pN :signed-long size))
         (with-macptrs ((err (external-call "GetDevices" :address (%null-ptr) :address pN :address pdevices :address)))
            (unless (%null-ptr-p err)
               (error 'on-uhppote-error :message (go-string err))
            )
         )
         (let ((N (%get-signed-long pN)))
            (make-get-devices-list :N N :devices (subseq devices 0 (cond ((< N size) N) (T size))))
         )
      )
   )
)

(defun example () "" 
   (handler-bind
      ((on-uhppote-error
         #'(lambda (c) 
              (format t "*** ERROR: ~a" (message c))
              (invoke-restart 'return-value nil)
           )
         )
      )
      (list "get-devices" (get-devices))
   )
)

(defun debug () "" 
   (handler-bind
      ((on-uhppote-error
         #'(lambda (c) 
              (format t "*** ERROR: ~a" (message c))
              (invoke-restart 'return-value nil)
           )
         )
      )
      (list "get-devices" (get-devices))
   )
)

(defun go-string (cstr) "Converts a 'C' char * returned by the Go FFI to a string"
   (cond ((%null-ptr-p cstr) "")
         (T (format nil "~{~A~}" (go-string-char cstr 0)))
   )
)

(defun go-string-char (cstr ix) "Accumulates characters from a 'C' char * until it reaches the \0 terminator"
   (let ((ch (%get-unsigned-byte cstr ix)))
        (cond ((eq ch 0) ())
              (T (cons (code-char ch) (go-string-char cstr (+ ix 1))))
        )
   )
)

