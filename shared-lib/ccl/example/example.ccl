(open-shared-library "libuhppoted-debug.so")

(defun uhppoted-externs () ""
   (external "GetDevices")
)

(define-condition on-uhppote-error (error)
   ((message :initarg :message :reader message))
)

(def-foreign-type nil
  (:struct :UHPPOTE
           (:bind      :address)
           (:broadcast :address)
           (:listen    :address)
           (:timeout   :int)
           (:devices   :address)
           (:debug     :int)
  )
)

(defun get-devices (&optional (N 16)) ""
   (destructuring-bind  (p q) (get-devices-n N)
      (cond ((>= N p) (subseq q 0 p))
            (T (get-devices (+ N 16)))
      )
   )
)

(defun get-devices-n (max) ""
    (multiple-value-bind (devices pdevices) (make-heap-ivector max '(unsigned-byte 32))
       (rlet ((pU (:struct :UHPPOTE) 
                  :bind      (%null-ptr)
                  :broadcast (%null-ptr)
                  :listen    (%null-ptr)
                  :timeout   13 
                  :devices   (%null-ptr) 
                  :debug     1)
              (pN :signed-long max))
          (with-macptrs ((err (external-call "GetDevices" :address pU :address pN :address pdevices :address)))
             (unless (%null-ptr-p err)
                (error 'on-uhppote-error :message (go-string err))
             )
          )
          (list (%get-signed-long pN) devices)
       )
    )
)

(defun example () "" 
   (handler-bind
      ((on-uhppote-error
         #'(lambda (c) 
              (format t "*** ERROR: ~a" (message c))
              (invoke-restart 'return-value nil)
           )
         )
      )
      (list "get-devices" (get-devices))
   )
)

(defun debug () "" 
   (handler-bind
      ((on-uhppote-error
         #'(lambda (c) 
              (format t "*** ERROR: ~a" (message c))
              (invoke-restart 'return-value nil)
           )
         )
      )
      (list "get-devices" (get-devices))
   )
)

(defun go-string (cstr) "Converts a 'C' char * returned by the Go FFI to a string"
   (cond ((%null-ptr-p cstr) "")
         (T (format nil "~{~A~}" (go-string-char cstr 0)))
   )
)

(defun go-string-char (cstr ix) "Accumulates characters from a 'C' char * until it reaches the \0 terminator"
   (let ((ch (%get-unsigned-byte cstr ix)))
        (cond ((eq ch 0) ())
              (T (cons (code-char ch) (go-string-char cstr (+ ix 1))))
        )
   )
)

