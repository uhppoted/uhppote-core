(open-shared-library (native-translated-namestring (make-pathname :directory (getenv "DYLD_LIBRARY_PATH") 
                                                                  :name "libuhppoted" 
                                                                  :type "so")))

(defun uhppoted-externs () ""
   (list (external "GetDevices")
         (external "GetDevice"))
)

(define-condition on-uhppote-error (error)
   ((message :initarg :message :reader message))
)

(def-foreign-type nil
  (:struct :UHPPOTE
           (:bind      :address)
           (:broadcast :address)
           (:listen    :address)
           (:timeout   :int)
           (:devices   :address)
           (:debug     :int)
  )
)

(def-foreign-type nil
  (:struct :UDEVICE
           (:id      :int)
           (:address :address)
           (:next    :address)
  )
)

(defun go-string (cstr) "Converts a 'C' char * returned by the Go FFI to a string"
   (cond ((%null-ptr-p cstr) "")
         (T (format nil "~{~A~}" (go-string-char cstr 0)))
   )
)

(defun go-string-char (cstr ix) "Accumulates characters from a 'C' char * until it reaches the \0 terminator"
   (let ((ch (%get-unsigned-byte cstr ix)))
        (cond ((eq ch 0) ())
              (T (cons (code-char ch) (go-string-char cstr (+ ix 1))))
        )
   )
)

(defun get-devices (uhppote &optional (N 16)) ""
   (destructuring-bind  (p q) (get-devices-n uhppote N)
      (cond ((>= N p) (subseq q 0 p))
            (T (get-devices uhppote (+ N 16)))
      )
   )
)

(defun get-devices-n (uhppote max) ""
   (multiple-value-bind (devices pdevices) (make-heap-ivector max '(unsigned-byte 32))
      (rlet ((N :signed-long max))
         (with-macptrs ((err (external-call "GetDevices" :address uhppote :address N :address pdevices :address)))
            (unless (%null-ptr-p err) (error 'on-uhppote-error :message (go-string err))))
         (list (%get-signed-long N) devices)
      )
   )
)

(defun uhppoted (f &key (bind-addr "") (broadcast-addr "") (listen-addr "") (timeout 5) (debug NIL)) ""
    (with-cstrs ((bind      bind-addr)
                 (broadcast broadcast-addr)
                 (listen    listen-addr)
                 (alpha     "192.168.1.100")
                 (beta      "192.168.1.100"))
       (rlet ((palpha (:struct UDEVICE) :id 303986753 :address alpha :next (%null-ptr))
              (pbeta  (:struct UDEVICE) :id 405419896 :address beta  :next palpha)
              (uhppote (:struct :UHPPOTE) 
                        :bind      bind
                        :broadcast broadcast
                        :listen    listen
                        :timeout   timeout
                        :devices   pbeta
                        :debug     (cond (debug 1) (T 0))))
          (funcall f uhppote)
       )
   )
)

(defun example () "" 
   (handler-bind
      ((on-uhppote-error
         #'(lambda (c) 
              (format t "*** ERROR: ~a" (message c))
              (invoke-restart 'return-value nil)
           )
         )
      )
      (list "get-devices" (uhppoted #'get-devices
                                    :bind-addr "192.168.1.100"
                                    :broadcast-addr "192.168.1.100"
                                    :listen-addr "192.168.1.100:60001"
                                    :timeout 1
                                    :debug T))
   )
)

(defun debug () "" 
   (handler-bind
      ((on-uhppote-error
         #'(lambda (c) 
              (format t "*** ERROR: ~a" (message c))
              (invoke-restart 'return-value nil)
           )
         )
      )
      (list "get-devices" (uhppoted #'get-devices))
   )
)

