(open-shared-library "../../lib/lib/libuhppoted.so")

(defun uhppoted-externs () ""
   (external "GetDevices")
)

(define-condition on-uhppote-error (error)
   ((message :initarg :message :reader message))
)

(def-foreign-type nil
  (:struct :UHPPOTE
           (:bind      :address)
           (:broadcast :address)
           (:listen    :address)
           (:timeout   :int)
           (:devices   :address)
           (:debug     :int)
  )
)

(def-foreign-type nil
  (:struct :UDEVICE
           (:id      :int)
           (:address :address)
           (:next    :address)
  )
)

(defun get-devices (&optional (N 16)) ""
   (destructuring-bind  (p q) (get-devices-n N)
      (cond ((>= N p) (subseq q 0 p))
            (T (get-devices (+ N 16)))
      )
   )
)

(defun get-devices-n (max) ""
    (with-cstrs ((bind      "192.168.1.100")
                 (broadcast "192.168.1.100:60000")
                 (listen    "192.168.1.100:60001")
                 (alpha     "192.168.1.100")
                 (beta      "192.168.1.100"))
       (rlet ((palpha (:struct UDEVICE)
                      :id      303986753
                      :address alpha
                      :next    (%null-ptr))
              (pbeta (:struct UDEVICE)
                      :id      405419896
                      :address beta
                      :next    palpha)
             )
          (multiple-value-bind (devices pdevices) (make-heap-ivector max '(unsigned-byte 32))
             (rlet ((pU (:struct :UHPPOTE) 
                         :bind      bind
                         :broadcast broadcast
                         :listen    listen
                         :timeout   1
                         :devices   pbeta
                         :debug     1)
                    (pN :signed-long max))
                (with-macptrs ((err (external-call "GetDevices" :address pU :address pN :address pdevices :address)))
                   (unless (%null-ptr-p err)
                      (error 'on-uhppote-error :message (go-string err))
                   )
                )
                (list (%get-signed-long pN) devices)
             )
          )
       )
    )
)

(defun example () "" 
   (handler-bind
      ((on-uhppote-error
         #'(lambda (c) 
              (format t "*** ERROR: ~a" (message c))
              (invoke-restart 'return-value nil)
           )
         )
      )
      (list "get-devices" (get-devices))
   )
)

(defun debug () "" 
   (handler-bind
      ((on-uhppote-error
         #'(lambda (c) 
              (format t "*** ERROR: ~a" (message c))
              (invoke-restart 'return-value nil)
           )
         )
      )
      (list "get-devices" (get-devices))
   )
)

(defun go-string (cstr) "Converts a 'C' char * returned by the Go FFI to a string"
   (cond ((%null-ptr-p cstr) "")
         (T (format nil "~{~A~}" (go-string-char cstr 0)))
   )
)

(defun go-string-char (cstr ix) "Accumulates characters from a 'C' char * until it reaches the \0 terminator"
   (let ((ch (%get-unsigned-byte cstr ix)))
        (cond ((eq ch 0) ())
              (T (cons (code-char ch) (go-string-char cstr (+ ix 1))))
        )
   )
)

