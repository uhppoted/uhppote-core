package uhppote

import (
	"reflect"
	"testing"
	"uhppote/encoding"
)

func TestMarshalSetDoorDelayRequest(t *testing.T) {
	expected := []byte{
		0x17, 0x80, 0x00, 0x00, 0x2d, 0x55, 0x39, 0x19, 0x04, 0x03, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	request := SetDoorDelayRequest{
		MsgType:      0x80,
		SerialNumber: 423187757,
		Door:         4,
		Unit:         0x03,
		Delay:        5,
	}

	m, err := uhppote.Marshal(request)

	if err != nil {
		t.Errorf("Unexpected error: %v", err)
		return
	}

	if !reflect.DeepEqual(m, expected) {
		t.Errorf("Invalid byte array:\nExpected:\n%s\nReturned:\n%s", print(expected), print(m))
		return
	}
}

func TestUnmarshalSetDoorDelayResponse(t *testing.T) {
	message := []byte{
		0x17, 0x80, 0x00, 0x00, 0x2d, 0x55, 0x39, 0x19, 0x04, 0x03, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	reply := SetDoorDelayResponse{}

	err := uhppote.Unmarshal(message, &reply)

	if err != nil {
		t.Errorf("Unexpected error: %v\n", err)
	}

	if reply.MsgType != 0x80 {
		t.Errorf("Incorrect 'message type' - expected:%02X, got:%02x\n", 0x80, reply.MsgType)
	}

	if reply.SerialNumber != 423187757 {
		t.Errorf("Incorrect 'serial number' - expected:%v, got:%v\n", 423187757, reply.SerialNumber)
	}

	if reply.Door != 4 {
		t.Errorf("Incorrect 'door' - expected:%v, got:%v\n", 4, reply.Door)
	}

	if reply.Unit != 0x3 {
		t.Errorf("Incorrect 'time unit' - expected:%v, got:%v\n", 0x03, reply.Unit)
	}

	if reply.Delay != 5 {
		t.Errorf("Incorrect 'delay' - expected:%v, got:%v\n", 5, reply.Delay)
	}
}
